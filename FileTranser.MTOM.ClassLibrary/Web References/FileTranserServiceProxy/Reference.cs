//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace FileTranser.MTOM.ClassLibrary.FileTranserServiceProxy {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FileTransferWebServiceSoap", Namespace="http://FileTransfer.MTOM.WebServices/")]
    public partial class FileTransferWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpdateInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUpdateSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback PingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUpLoadInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDefaultDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCluesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateReCheckDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCheckDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentUserPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUploadTokeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AppendChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndAppendChunkOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFileHashOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaxRequestLengthOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FileTransferWebService() {
            this.Url = global::FileTranser.MTOM.ClassLibrary.Properties.Settings.Default.FileTranser_MTOM_ClassLibrary_FileTranserServiceProxy_FileTransferWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event GetUpdateInfoCompletedEventHandler GetUpdateInfoCompleted;
        
        /// <remarks/>
        public event SetUpdateSignCompletedEventHandler SetUpdateSignCompleted;
        
        /// <remarks/>
        public event PingCompletedEventHandler PingCompleted;
        
        /// <remarks/>
        public event GetDataStatusCompletedEventHandler GetDataStatusCompleted;
        
        /// <remarks/>
        public event GetUpLoadInfoCompletedEventHandler GetUpLoadInfoCompleted;
        
        /// <remarks/>
        public event SetDefaultDataCompletedEventHandler SetDefaultDataCompleted;
        
        /// <remarks/>
        public event GetCluesCompletedEventHandler GetCluesCompleted;
        
        /// <remarks/>
        public event UpdateReCheckDataCompletedEventHandler UpdateReCheckDataCompleted;
        
        /// <remarks/>
        public event UpdateCheckDataCompletedEventHandler UpdateCheckDataCompleted;
        
        /// <remarks/>
        public event GetCurrentUserPathCompletedEventHandler GetCurrentUserPathCompleted;
        
        /// <remarks/>
        public event GetCurrentUserInfoCompletedEventHandler GetCurrentUserInfoCompleted;
        
        /// <remarks/>
        public event GetUploadTokeCompletedEventHandler GetUploadTokeCompleted;
        
        /// <remarks/>
        public event AppendChunkCompletedEventHandler AppendChunkCompleted;
        
        /// <remarks/>
        public event EndAppendChunkCompletedEventHandler EndAppendChunkCompleted;
        
        /// <remarks/>
        public event CheckFileHashCompletedEventHandler CheckFileHashCompleted;
        
        /// <remarks/>
        public event GetMaxRequestLengthCompletedEventHandler GetMaxRequestLengthCompleted;
        
        /// <remarks/>
        public event UpdateInfoCompletedEventHandler UpdateInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/Login", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(string logintoken, string UserName, string Password) {
            object[] results = this.Invoke("Login", new object[] {
                        logintoken,
                        UserName,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string logintoken, string UserName, string Password) {
            this.LoginAsync(logintoken, UserName, Password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string logintoken, string UserName, string Password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        logintoken,
                        UserName,
                        Password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/GetUpdateInfo", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUpdateInfo(string logintoken, string lasetupdateversion) {
            object[] results = this.Invoke("GetUpdateInfo", new object[] {
                        logintoken,
                        lasetupdateversion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUpdateInfoAsync(string logintoken, string lasetupdateversion) {
            this.GetUpdateInfoAsync(logintoken, lasetupdateversion, null);
        }
        
        /// <remarks/>
        public void GetUpdateInfoAsync(string logintoken, string lasetupdateversion, object userState) {
            if ((this.GetUpdateInfoOperationCompleted == null)) {
                this.GetUpdateInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpdateInfoOperationCompleted);
            }
            this.InvokeAsync("GetUpdateInfo", new object[] {
                        logintoken,
                        lasetupdateversion}, this.GetUpdateInfoOperationCompleted, userState);
        }
        
        private void OnGetUpdateInfoOperationCompleted(object arg) {
            if ((this.GetUpdateInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpdateInfoCompleted(this, new GetUpdateInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/SetUpdateSign", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetUpdateSign(string logintoken, string version) {
            object[] results = this.Invoke("SetUpdateSign", new object[] {
                        logintoken,
                        version});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetUpdateSignAsync(string logintoken, string version) {
            this.SetUpdateSignAsync(logintoken, version, null);
        }
        
        /// <remarks/>
        public void SetUpdateSignAsync(string logintoken, string version, object userState) {
            if ((this.SetUpdateSignOperationCompleted == null)) {
                this.SetUpdateSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUpdateSignOperationCompleted);
            }
            this.InvokeAsync("SetUpdateSign", new object[] {
                        logintoken,
                        version}, this.SetUpdateSignOperationCompleted, userState);
        }
        
        private void OnSetUpdateSignOperationCompleted(object arg) {
            if ((this.SetUpdateSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUpdateSignCompleted(this, new SetUpdateSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/Ping", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Ping() {
            object[] results = this.Invoke("Ping", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        /// <remarks/>
        public void PingAsync(object userState) {
            if ((this.PingOperationCompleted == null)) {
                this.PingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPingOperationCompleted);
            }
            this.InvokeAsync("Ping", new object[0], this.PingOperationCompleted, userState);
        }
        
        private void OnPingOperationCompleted(object arg) {
            if ((this.PingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PingCompleted(this, new PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/GetDataStatus", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataStatus(string logintoken, string dbInfo) {
            object[] results = this.Invoke("GetDataStatus", new object[] {
                        logintoken,
                        dbInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataStatusAsync(string logintoken, string dbInfo) {
            this.GetDataStatusAsync(logintoken, dbInfo, null);
        }
        
        /// <remarks/>
        public void GetDataStatusAsync(string logintoken, string dbInfo, object userState) {
            if ((this.GetDataStatusOperationCompleted == null)) {
                this.GetDataStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataStatusOperationCompleted);
            }
            this.InvokeAsync("GetDataStatus", new object[] {
                        logintoken,
                        dbInfo}, this.GetDataStatusOperationCompleted, userState);
        }
        
        private void OnGetDataStatusOperationCompleted(object arg) {
            if ((this.GetDataStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataStatusCompleted(this, new GetDataStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/GetUpLoadInfo", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUpLoadInfo(string logintoken) {
            object[] results = this.Invoke("GetUpLoadInfo", new object[] {
                        logintoken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUpLoadInfoAsync(string logintoken) {
            this.GetUpLoadInfoAsync(logintoken, null);
        }
        
        /// <remarks/>
        public void GetUpLoadInfoAsync(string logintoken, object userState) {
            if ((this.GetUpLoadInfoOperationCompleted == null)) {
                this.GetUpLoadInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUpLoadInfoOperationCompleted);
            }
            this.InvokeAsync("GetUpLoadInfo", new object[] {
                        logintoken}, this.GetUpLoadInfoOperationCompleted, userState);
        }
        
        private void OnGetUpLoadInfoOperationCompleted(object arg) {
            if ((this.GetUpLoadInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUpLoadInfoCompleted(this, new GetUpLoadInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/SetDefaultData", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetDefaultData(string logintoken, string dbInfo) {
            object[] results = this.Invoke("SetDefaultData", new object[] {
                        logintoken,
                        dbInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetDefaultDataAsync(string logintoken, string dbInfo) {
            this.SetDefaultDataAsync(logintoken, dbInfo, null);
        }
        
        /// <remarks/>
        public void SetDefaultDataAsync(string logintoken, string dbInfo, object userState) {
            if ((this.SetDefaultDataOperationCompleted == null)) {
                this.SetDefaultDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultDataOperationCompleted);
            }
            this.InvokeAsync("SetDefaultData", new object[] {
                        logintoken,
                        dbInfo}, this.SetDefaultDataOperationCompleted, userState);
        }
        
        private void OnSetDefaultDataOperationCompleted(object arg) {
            if ((this.SetDefaultDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDefaultDataCompleted(this, new SetDefaultDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/GetClues", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetClues(string logintoken, int RowID, string ID) {
            object[] results = this.Invoke("GetClues", new object[] {
                        logintoken,
                        RowID,
                        ID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCluesAsync(string logintoken, int RowID, string ID) {
            this.GetCluesAsync(logintoken, RowID, ID, null);
        }
        
        /// <remarks/>
        public void GetCluesAsync(string logintoken, int RowID, string ID, object userState) {
            if ((this.GetCluesOperationCompleted == null)) {
                this.GetCluesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCluesOperationCompleted);
            }
            this.InvokeAsync("GetClues", new object[] {
                        logintoken,
                        RowID,
                        ID}, this.GetCluesOperationCompleted, userState);
        }
        
        private void OnGetCluesOperationCompleted(object arg) {
            if ((this.GetCluesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCluesCompleted(this, new GetCluesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/UpdateReCheckData", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] UpdateReCheckData(string logintoken, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer) {
            object[] results = this.Invoke("UpdateReCheckData", new object[] {
                        logintoken,
                        buffer});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void UpdateReCheckDataAsync(string logintoken, byte[] buffer) {
            this.UpdateReCheckDataAsync(logintoken, buffer, null);
        }
        
        /// <remarks/>
        public void UpdateReCheckDataAsync(string logintoken, byte[] buffer, object userState) {
            if ((this.UpdateReCheckDataOperationCompleted == null)) {
                this.UpdateReCheckDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateReCheckDataOperationCompleted);
            }
            this.InvokeAsync("UpdateReCheckData", new object[] {
                        logintoken,
                        buffer}, this.UpdateReCheckDataOperationCompleted, userState);
        }
        
        private void OnUpdateReCheckDataOperationCompleted(object arg) {
            if ((this.UpdateReCheckDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateReCheckDataCompleted(this, new UpdateReCheckDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/UpdateCheckData", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] UpdateCheckData(string logintoken, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer) {
            object[] results = this.Invoke("UpdateCheckData", new object[] {
                        logintoken,
                        buffer});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCheckDataAsync(string logintoken, byte[] buffer) {
            this.UpdateCheckDataAsync(logintoken, buffer, null);
        }
        
        /// <remarks/>
        public void UpdateCheckDataAsync(string logintoken, byte[] buffer, object userState) {
            if ((this.UpdateCheckDataOperationCompleted == null)) {
                this.UpdateCheckDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCheckDataOperationCompleted);
            }
            this.InvokeAsync("UpdateCheckData", new object[] {
                        logintoken,
                        buffer}, this.UpdateCheckDataOperationCompleted, userState);
        }
        
        private void OnUpdateCheckDataOperationCompleted(object arg) {
            if ((this.UpdateCheckDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCheckDataCompleted(this, new UpdateCheckDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/GetCurrentUserPath", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCurrentUserPath(string loginToken) {
            object[] results = this.Invoke("GetCurrentUserPath", new object[] {
                        loginToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentUserPathAsync(string loginToken) {
            this.GetCurrentUserPathAsync(loginToken, null);
        }
        
        /// <remarks/>
        public void GetCurrentUserPathAsync(string loginToken, object userState) {
            if ((this.GetCurrentUserPathOperationCompleted == null)) {
                this.GetCurrentUserPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentUserPathOperationCompleted);
            }
            this.InvokeAsync("GetCurrentUserPath", new object[] {
                        loginToken}, this.GetCurrentUserPathOperationCompleted, userState);
        }
        
        private void OnGetCurrentUserPathOperationCompleted(object arg) {
            if ((this.GetCurrentUserPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentUserPathCompleted(this, new GetCurrentUserPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/GetCurrentUserInfo", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCurrentUserInfo(string loginToken) {
            object[] results = this.Invoke("GetCurrentUserInfo", new object[] {
                        loginToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentUserInfoAsync(string loginToken) {
            this.GetCurrentUserInfoAsync(loginToken, null);
        }
        
        /// <remarks/>
        public void GetCurrentUserInfoAsync(string loginToken, object userState) {
            if ((this.GetCurrentUserInfoOperationCompleted == null)) {
                this.GetCurrentUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetCurrentUserInfo", new object[] {
                        loginToken}, this.GetCurrentUserInfoOperationCompleted, userState);
        }
        
        private void OnGetCurrentUserInfoOperationCompleted(object arg) {
            if ((this.GetCurrentUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentUserInfoCompleted(this, new GetCurrentUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/GetUploadToke", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUploadToke(string loginToken, string FileName) {
            object[] results = this.Invoke("GetUploadToke", new object[] {
                        loginToken,
                        FileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUploadTokeAsync(string loginToken, string FileName) {
            this.GetUploadTokeAsync(loginToken, FileName, null);
        }
        
        /// <remarks/>
        public void GetUploadTokeAsync(string loginToken, string FileName, object userState) {
            if ((this.GetUploadTokeOperationCompleted == null)) {
                this.GetUploadTokeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUploadTokeOperationCompleted);
            }
            this.InvokeAsync("GetUploadToke", new object[] {
                        loginToken,
                        FileName}, this.GetUploadTokeOperationCompleted, userState);
        }
        
        private void OnGetUploadTokeOperationCompleted(object arg) {
            if ((this.GetUploadTokeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUploadTokeCompleted(this, new GetUploadTokeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/AppendChunk", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AppendChunk(string loginToken, string uploaderToken, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer, long Offset) {
            object[] results = this.Invoke("AppendChunk", new object[] {
                        loginToken,
                        uploaderToken,
                        buffer,
                        Offset});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AppendChunkAsync(string loginToken, string uploaderToken, byte[] buffer, long Offset) {
            this.AppendChunkAsync(loginToken, uploaderToken, buffer, Offset, null);
        }
        
        /// <remarks/>
        public void AppendChunkAsync(string loginToken, string uploaderToken, byte[] buffer, long Offset, object userState) {
            if ((this.AppendChunkOperationCompleted == null)) {
                this.AppendChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppendChunkOperationCompleted);
            }
            this.InvokeAsync("AppendChunk", new object[] {
                        loginToken,
                        uploaderToken,
                        buffer,
                        Offset}, this.AppendChunkOperationCompleted, userState);
        }
        
        private void OnAppendChunkOperationCompleted(object arg) {
            if ((this.AppendChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppendChunkCompleted(this, new AppendChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/EndAppendChunk", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EndAppendChunk(string uploaderToken, int Status, string InfoMsg, string ErrorMsg) {
            object[] results = this.Invoke("EndAppendChunk", new object[] {
                        uploaderToken,
                        Status,
                        InfoMsg,
                        ErrorMsg});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EndAppendChunkAsync(string uploaderToken, int Status, string InfoMsg, string ErrorMsg) {
            this.EndAppendChunkAsync(uploaderToken, Status, InfoMsg, ErrorMsg, null);
        }
        
        /// <remarks/>
        public void EndAppendChunkAsync(string uploaderToken, int Status, string InfoMsg, string ErrorMsg, object userState) {
            if ((this.EndAppendChunkOperationCompleted == null)) {
                this.EndAppendChunkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndAppendChunkOperationCompleted);
            }
            this.InvokeAsync("EndAppendChunk", new object[] {
                        uploaderToken,
                        Status,
                        InfoMsg,
                        ErrorMsg}, this.EndAppendChunkOperationCompleted, userState);
        }
        
        private void OnEndAppendChunkOperationCompleted(object arg) {
            if ((this.EndAppendChunkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndAppendChunkCompleted(this, new EndAppendChunkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/CheckFileHash", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckFileHash(string loginToken, string UploadToken) {
            object[] results = this.Invoke("CheckFileHash", new object[] {
                        loginToken,
                        UploadToken});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFileHashAsync(string loginToken, string UploadToken) {
            this.CheckFileHashAsync(loginToken, UploadToken, null);
        }
        
        /// <remarks/>
        public void CheckFileHashAsync(string loginToken, string UploadToken, object userState) {
            if ((this.CheckFileHashOperationCompleted == null)) {
                this.CheckFileHashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFileHashOperationCompleted);
            }
            this.InvokeAsync("CheckFileHash", new object[] {
                        loginToken,
                        UploadToken}, this.CheckFileHashOperationCompleted, userState);
        }
        
        private void OnCheckFileHashOperationCompleted(object arg) {
            if ((this.CheckFileHashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFileHashCompleted(this, new CheckFileHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/GetMaxRequestLength", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetMaxRequestLength() {
            object[] results = this.Invoke("GetMaxRequestLength", new object[0]);
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetMaxRequestLengthAsync() {
            this.GetMaxRequestLengthAsync(null);
        }
        
        /// <remarks/>
        public void GetMaxRequestLengthAsync(object userState) {
            if ((this.GetMaxRequestLengthOperationCompleted == null)) {
                this.GetMaxRequestLengthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaxRequestLengthOperationCompleted);
            }
            this.InvokeAsync("GetMaxRequestLength", new object[0], this.GetMaxRequestLengthOperationCompleted, userState);
        }
        
        private void OnGetMaxRequestLengthOperationCompleted(object arg) {
            if ((this.GetMaxRequestLengthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaxRequestLengthCompleted(this, new GetMaxRequestLengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://FileTransfer.MTOM.WebServices/UpdateInfo", RequestNamespace="http://FileTransfer.MTOM.WebServices/", ResponseNamespace="http://FileTransfer.MTOM.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateInfo(string currentversion) {
            object[] results = this.Invoke("UpdateInfo", new object[] {
                        currentversion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateInfoAsync(string currentversion) {
            this.UpdateInfoAsync(currentversion, null);
        }
        
        /// <remarks/>
        public void UpdateInfoAsync(string currentversion, object userState) {
            if ((this.UpdateInfoOperationCompleted == null)) {
                this.UpdateInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateInfo", new object[] {
                        currentversion}, this.UpdateInfoOperationCompleted, userState);
        }
        
        private void OnUpdateInfoOperationCompleted(object arg) {
            if ((this.UpdateInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateInfoCompleted(this, new UpdateInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUpdateInfoCompletedEventHandler(object sender, GetUpdateInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpdateInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpdateInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetUpdateSignCompletedEventHandler(object sender, SetUpdateSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUpdateSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUpdateSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetDataStatusCompletedEventHandler(object sender, GetDataStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUpLoadInfoCompletedEventHandler(object sender, GetUpLoadInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUpLoadInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUpLoadInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SetDefaultDataCompletedEventHandler(object sender, SetDefaultDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDefaultDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDefaultDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCluesCompletedEventHandler(object sender, GetCluesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCluesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCluesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdateReCheckDataCompletedEventHandler(object sender, UpdateReCheckDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateReCheckDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateReCheckDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdateCheckDataCompletedEventHandler(object sender, UpdateCheckDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCheckDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCheckDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCurrentUserPathCompletedEventHandler(object sender, GetCurrentUserPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentUserPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentUserPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetCurrentUserInfoCompletedEventHandler(object sender, GetCurrentUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUploadTokeCompletedEventHandler(object sender, GetUploadTokeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUploadTokeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUploadTokeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void AppendChunkCompletedEventHandler(object sender, AppendChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppendChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AppendChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void EndAppendChunkCompletedEventHandler(object sender, EndAppendChunkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EndAppendChunkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EndAppendChunkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void CheckFileHashCompletedEventHandler(object sender, CheckFileHashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFileHashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFileHashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetMaxRequestLengthCompletedEventHandler(object sender, GetMaxRequestLengthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaxRequestLengthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaxRequestLengthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UpdateInfoCompletedEventHandler(object sender, UpdateInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591